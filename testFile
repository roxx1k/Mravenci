TESTIK



using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SortingAlgorithms
{
    public enum Direction
    {
        Desc,
        Asc
    }
    class Program
    {
        static void Main(string[] args)
        {
            // 1 8 3 4 9 2 5
            uint[] input = new uint[7] { 1, 8, 3, 4, 9, 2, 5 };
            PrintIntArray(input);
            Console.WriteLine("How to sort?\n0: Descending\n1: Ascending");
            //Direction direction = Console.ReadLine();
            uint[] sortedBySelectionSort = SelectionSort(input, Direction.Desc);
            PrintIntArray(sortedBySelectionSort);
            bool isSorted = IsSorted(sortedBySelectionSort, Direction.Desc);

            uint[] bigData = GenerateData(50000);
            Stopwatch watch = new Stopwatch();
            watch.Start();
            uint[] sortedBigDataSelectionSort = SelectionSort(bigData, Direction.Asc);
            watch.Stop();
            bool bigDataSorted = IsSorted(sortedBigDataSelectionSort, Direction.Asc);
            Console.WriteLine("Sorting time for selection sort: {0} sec", watch.Elapsed.Seconds);

        }

        private static uint[] SelectionSort(uint[] input, Direction dir)
        {
            uint[] sortedArray = (uint[])input.Clone();

            for (uint lineIndex = 0; lineIndex < sortedArray.Length; lineIndex++)
            {
                uint maxItemIndex = lineIndex;
                for (uint numberIndex = lineIndex + 1; numberIndex < sortedArray.Length; numberIndex++)
                {
                    if ((dir == Direction.Desc && sortedArray[numberIndex] > sortedArray[maxItemIndex])  || (dir == Direction.Asc && sortedArray[numberIndex] < sortedArray[maxItemIndex]))
                    {                        
                            maxItemIndex = numberIndex;                        
                    }
                   
                    
                }
                if (maxItemIndex != lineIndex)
                {
                    Swap(sortedArray, maxItemIndex, lineIndex);                    
                }

            }
            return sortedArray;
        }

        private static void Swap(uint[] array, uint indexFirst, uint indexSecond)
        {
            uint temp = array[indexFirst];
            array[indexFirst] = array[indexSecond];
            array[indexSecond] = temp;
        }
        private static void Swap(uint first, uint second)
        {
            uint temp = first;
            first = second;
            second = temp;

        }

        private static uint[] QuickSort(uint[] input)
        {
            throw new NotImplementedException();


        }

        private static uint[] MergeSort(uint[] input)
        {
            throw new NotImplementedException();
        }

        private static void PrintIntArray(uint[] array)
        {
            //prvni zpusob
            if (array.Length == 0) return;
            for (int i = 0; i < array.Length - 1; i++)
            {
                Console.Write(array[i] + " ");
            }
            Console.WriteLine(array[array.Length - 1]);

            ////druhy zpusob
            //if (array.Length == 0) return;
            //Console.Write(array[0]);
            //for (int i = 1; i < array.Length; i++)
            //{
            //    Console.Write(" " + array[i]);
            //}
        }

        static uint[] GenerateData(uint size)
        {
            Random randomGenerator = new Random(DateTime.Now.Millisecond);
            uint[] generatedData = new uint[size];
            for (uint i = 0; i < size; i++)
            {
                generatedData[i] = (uint)randomGenerator.Next();
            }
            return generatedData;
        }

        static bool IsSorted(uint[] array, Direction dir)
        {
            bool result = true;
            for (uint i = 1; i < array.Length; i++)
            {
                if ((dir == Direction.Desc && array[i-1] < array[i]) || (dir == Direction.Asc && array[i - 1] > array[i]))
                {
                    result =  false;
                    break;
                }

            }
            return result;
        }

    }
}




*************************************************************************************************
Linked List

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DataStructuresLibrary
{
    public class BothWayLinkedList
    {
        public class Node
        {
            public int Data { get; set; }
            public Node Next { get; set; }
            public Node Previous { get; set; }

        }

        private Node first;
        private Node last;
        public uint Size { get; private set; }

        public BothWayLinkedList()
        {
            first = null;
            last = null;
            Size = 0;
        }

        public bool IsEmpty()
        {
            return Size == 0;
        }

        //add first item
        public void InsertFirst(int value)
        {
            Node node = new Node() { Data = value, Next = null, Previous = null };
            if (first != null)
            {
                node.Next = first;
                first.Previous = node;
            }
            else
            {
                last = node;
            }
            first = node;
            Size++;
        }

        //insert last item
        public void InsertLast(int value)
        {
            Node node = new Node() { Data = value, Next = null, Previous = null };
            if (first != null)
            {
                last.Next = node;
                node.Previous = last;
            }
            else
            {
                first = node;
            }
            last = node;
            Size++;

        }

        //insert after
        public void InsertAfter(Node previousNode, int value)
        {
            if (previousNode == null) throw new ArgumentNullException();

            Node node = new Node() { Data = value, Previous = previousNode, Next = previousNode.Next };
            if (previousNode.Next != null)
            {
                node.Next.Previous = node;
            }
            else
            {
                last = node;
            }
            previousNode.Next = node;
            Size++;
        }

        //insert before
        public void InsertBefore(Node afterNode, int value)
        {
            if (afterNode == null) throw new ArgumentNullException();

            Node node = new Node() { Data = value, Previous = afterNode.Previous, Next = afterNode };
            if (afterNode.Previous != null)
            {
                node.Previous.Next = node;
            }
            else
            {
                first = node;
            }
            afterNode.Previous = node;
            Size++;
        }


        //access first item
        public Node AccessFirst()
        {
            return first;

        }

        //access last item
        public Node AccessLast()
        {
            return last;

        }

        public Node AccessAfter(Node previousNode)
        {
            if (previousNode == null)
            {
                throw new ArgumentNullException();
            }
            return previousNode.Next;
        }

        public Node AccessBefore(Node afterNode)
        {
            if (afterNode == null)
            {
                throw new ArgumentNullException();
            }
            return afterNode.Previous;
        }

        public Node EraseFirst()
        {
            Node erased = first;
            if (first != null) //empty
            {

                Size--;
                if (first.Next == null) //only one node
                {
                    first = null;
                    last = null;
                }
                else //more than 1 node
                {
                    //muj postup
                    //Node ret = first;
                    //first.Next.Previous = null;
                    //first = first.Next;
                    //return ret;

                    first = first.Next;
                    first.Previous = null;
                }
                erased.Next = null;
            }
            return erased;

        }

        public Node EraseLast()
        {
            Node erased = last;
            if (last != null)
            {
                Size--;
                if (last.Previous == null) // 1 node
                {
                    first = null;
                    last = null;
                }
                else // more than 1 node
                {
                    last = last.Previous;
                    last.Next = null;
                }
                erased.Previous = null;
            }

            return erased;

        }

        public Node EraseAfter(Node previousNode)
        {
            if (previousNode == null) //null argument
            {
                throw new ArgumentNullException();
            }
            Node erased = previousNode.Next;
            if (previousNode.Next != null) //erased node exists
            {
                Size--;
                if (previousNode.Next == last) //erased was last node
                {
                    last = previousNode;
                    previousNode.Next = null;
                }
                else // erased wasn't last node
                {
                    previousNode.Next = previousNode.Next.Next;
                    previousNode.Next.Previous = previousNode;
                    erased.Next = null;
                }
                erased.Previous = null;
            }
            return erased;
        }


        public Node EraseBefore(Node afterNode)
        {
            if (afterNode == null)
            {
                throw new ArgumentNullException();
            }
            Node erased = afterNode.Previous;
            if (afterNode.Previous != null) //erased node exists
            {
                Size--;
                if (afterNode.Previous == first) //erased was first node
                {
                    first = afterNode;
                    afterNode.Previous = null;
                }
                else // erased wasn't first node
                {
                    afterNode.Previous = afterNode.Previous.Previous;
                    afterNode.Previous.Next = afterNode;
                    erased.Previous = null;
                }
                erased.Next = null;
            }
            return erased;
            
        }
    }
}

*****************************************************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BinaryTree
{
    public class Tree
    {
        public class Node
        {
            public int Data { get; set; }            
            public Node Child { get; set; }
            public Node Sibling { get; set; }
        }

        Node root;
        public uint Size { get; private set; }

        public Tree()
        {
            Size = 0;
            root = null;
        }

        public bool IsEmpty()
        {
            return Size == 0;
        }

        public void AddRoot(int data)
        {
            if (root == null)
            {
                Node item = new Node() { Data = data, Child = null, Sibling = null };
                root = item;
                Size++;
            }            
        }

        public void AddChild(Node root, int data)
        {
            Node temp = root;
            if (root != null)
            {
                Node newNode = new Node() { Data = data, Child = null, Sibling = null };
                if (root.Child == null)
                {
                    root.Child = newNode;
                }
                else
                {
                    AddChild(root.Child, data);
                }

                Size++;
            }
        }

        public void AddSibling()
        {
            throw new NotImplementedException();
        }
        
        public Node GetRoot()
        {
            return this.root;
        }
    }
}


